// Mocks generated by Mockito 5.3.0 from annotations
// in game_management_repository/test/fetching_game_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:appwrite/appwrite.dart' as _i4;
import 'package:appwrite/models.dart' as _i3;
import 'package:appwrite/src/client.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentList_1 extends _i1.SmartFake implements _i3.DocumentList {
  _FakeDocumentList_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocument_2 extends _i1.SmartFake implements _i3.Document {
  _FakeDocument_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Databases].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabases extends _i1.Mock implements _i4.Databases {
  MockDatabases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get databaseId =>
      (super.noSuchMethod(Invocation.getter(#databaseId), returnValue: '')
          as String);
  @override
  set databaseId(String? _databaseId) =>
      super.noSuchMethod(Invocation.setter(#databaseId, _databaseId),
          returnValueForMissingStub: null);
  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
          returnValue: _FakeClient_0(this, Invocation.getter(#client)))
      as _i2.Client);
  @override
  _i5.Future<_i3.DocumentList> listDocuments(
          {String? collectionId,
          List<dynamic>? queries,
          int? limit,
          int? offset,
          String? cursor,
          String? cursorDirection,
          List<dynamic>? orderAttributes,
          List<dynamic>? orderTypes}) =>
      (super.noSuchMethod(
          Invocation.method(#listDocuments, [], {
            #collectionId: collectionId,
            #queries: queries,
            #limit: limit,
            #offset: offset,
            #cursor: cursor,
            #cursorDirection: cursorDirection,
            #orderAttributes: orderAttributes,
            #orderTypes: orderTypes
          }),
          returnValue: _i5.Future<_i3.DocumentList>.value(_FakeDocumentList_1(
              this,
              Invocation.method(#listDocuments, [], {
                #collectionId: collectionId,
                #queries: queries,
                #limit: limit,
                #offset: offset,
                #cursor: cursor,
                #cursorDirection: cursorDirection,
                #orderAttributes: orderAttributes,
                #orderTypes: orderTypes
              })))) as _i5.Future<_i3.DocumentList>);
  @override
  _i5.Future<_i3.Document> createDocument(
          {String? collectionId,
          String? documentId,
          Map<dynamic, dynamic>? data,
          List<dynamic>? read,
          List<dynamic>? write}) =>
      (super.noSuchMethod(
          Invocation.method(#createDocument, [], {
            #collectionId: collectionId,
            #documentId: documentId,
            #data: data,
            #read: read,
            #write: write
          }),
          returnValue: _i5.Future<_i3.Document>.value(_FakeDocument_2(
              this,
              Invocation.method(#createDocument, [], {
                #collectionId: collectionId,
                #documentId: documentId,
                #data: data,
                #read: read,
                #write: write
              })))) as _i5.Future<_i3.Document>);
  @override
  _i5.Future<_i3.Document> getDocument(
          {String? collectionId, String? documentId}) =>
      (super
          .noSuchMethod(Invocation.method(#getDocument, [], {#collectionId: collectionId, #documentId: documentId}),
              returnValue: _i5.Future<_i3.Document>.value(_FakeDocument_2(
                  this,
                  Invocation.method(#getDocument, [], {
                    #collectionId: collectionId,
                    #documentId: documentId
                  })))) as _i5.Future<_i3.Document>);
  @override
  _i5.Future<_i3.Document> updateDocument(
          {String? collectionId,
          String? documentId,
          Map<dynamic, dynamic>? data,
          List<dynamic>? read,
          List<dynamic>? write}) =>
      (super.noSuchMethod(
          Invocation.method(#updateDocument, [], {
            #collectionId: collectionId,
            #documentId: documentId,
            #data: data,
            #read: read,
            #write: write
          }),
          returnValue: _i5.Future<_i3.Document>.value(_FakeDocument_2(
              this,
              Invocation.method(#updateDocument, [], {
                #collectionId: collectionId,
                #documentId: documentId,
                #data: data,
                #read: read,
                #write: write
              })))) as _i5.Future<_i3.Document>);
  @override
  _i5.Future<dynamic> deleteDocument(
          {String? collectionId, String? documentId}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteDocument, [],
              {#collectionId: collectionId, #documentId: documentId}),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
}
